/* eslint-disable @typescript-eslint/no-unused-vars */
import AccessTimeTwoToneIcon from "@mui/icons-material/AccessTimeTwoTone";
import KeyboardArrowDownOutlinedIcon from "@mui/icons-material/KeyboardArrowDownOutlined";
import PublicTwoToneIcon from "@mui/icons-material/PublicTwoTone";
import { Backdrop, CircularProgress } from "@mui/material";
import axios from "axios";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState, useEffect } from "react";
import { useQuery } from "react-query";

import DatePicker from "@components/shared/DatePicker";

const BookEvent = () => {
  const router = useRouter();
  const [value, setValue] = useState<Date | null>(new Date());
  const [isSelectedValue, setIsSelectedValue] = useState(false);
  const [time, setTime] = useState([
    "10:00 am",
    "10:15 am",
    "10:30 am",
    "10:45 am",
    "11:00 am",
    "11:15 am",
    "11:30 am",
  ]);

  const id = router.query.eventTypeId;

  const getEventType = async () => {
    const { data } = await axios.get(`/api/event-types/${id}`);
    return data;
  };

  const { data, isLoading } = useQuery("eventType", getEventType);

  useEffect(() => {
    setIsSelectedValue(true);
  }, [value]);

  if (isLoading) {
    return (
      <Backdrop sx={{ color: "#fff", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={isLoading}>
        <CircularProgress color="inherit" />
      </Backdrop>
    );
  }

  return (
    <div className="flex items-center justify-center w-screen h-screen bg-secondary">
      <Head>
        <title>
          {data.data.duration}min | {data.data.user.name} | Cal.com
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        className={`${
          isSelectedValue ? "w-[80%]" : "w-[60%]"
        }  h-[60%] bg-white border-8 border-secondary flex flex-row justify-between items-center`}>
        <div className="mx-5 border-r-2 border-secondary w-[30%] h-[90%] flex flex-col items-start">
          <span className="text-gray-500"> {data.data.user.name}</span>
          <span className="text-base font-bold">{data.data.duration} Min Meeting</span>
          <div className="flex flex-row items-center justify-center mt-5 text-gray-500">
            <AccessTimeTwoToneIcon className="mr-3" />
            <span>{data.data.duration} minutes</span>
          </div>
          <div className="flex flex-row items-center justify-center mt-2 text-gray-500 cursor-pointer">
            <PublicTwoToneIcon className="mr-3" />
            <span className="mr-3 ">Africa/Kigali</span>
            <KeyboardArrowDownOutlinedIcon />
          </div>
        </div>
        <div className={`${isSelectedValue ? "w-[40%]" : "w-[70%]"} h-full justify-center items-center flex`}>
          <DatePicker value={value} setValue={setValue} />
        </div>
        {isSelectedValue && (
          <div className="mx-5 border-l-2 border-secondary w-[30%] h-[90%] flex flex-col items-start pl-16">
            <span className="my-3">{value?.toDateString()}</span>
            {time.length &&
              time.map((slug, index) => (
                <button
                  className="px-3 py-2 border-2 border-black w-[80%] hover:bg-primary hover:text-white flex justify-center items-center cursor-pointer my-2"
                  key={index}
                  type="button"
                  onClick={() => {
                    router.push({
                      pathname: `/${data.data.user.name
                        .split(" ")[0]
                        .toLocaleLowerCase()}${data.data.user.name.split(" ")[1].toLocaleLowerCase()}/book`,
                      query: { eventTypeId: data.data.id, date: `${value}`, time: `${slug}` },
                    });
                  }}>
                  {slug}
                </button>
              ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default BookEvent;
