/* eslint-disable react-hooks/rules-of-hooks */

/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/no-unused-vars */
import AccessTimeTwoToneIcon from "@mui/icons-material/AccessTimeTwoTone";
import AddIcon from "@mui/icons-material/Add";
import CalendarTodayOutlinedIcon from "@mui/icons-material/CalendarTodayOutlined";
import { Backdrop, CircularProgress } from "@mui/material";
import Alert from "@mui/material/Alert";
import axios from "axios";
import { Formik } from "formik";
import moment from "moment";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "react-query";
import * as Yup from "yup";

import TextField from "@components/reusable/TextField";

interface EventState {
  date: any;
  time?: string;
  name: string;
  email: string;
  guests?: string[];
  eventType: number;
  notes?: string;
}

const validationSchema = Yup.object().shape({
  name: Yup.string().required().label("Full Name"),
  email: Yup.string().email().required().label("Email"),
  notes: Yup.string().label("Additional Notes"),
});

const Book = () => {
  const queryClient = useQueryClient();
  const [logMessage, setLogMessage] = useState<string>("");
  const [logError, setLogError] = useState<string>("");
  const router = useRouter();
  const { eventTypeId, date, time } = router.query;

  const getEventType = async () => {
    const { data } = await axios.get(`/api/event-types/${eventTypeId}`);
    return data;
  };

  const { data, isLoading: isLoadingGetData } = useQuery("eventType", getEventType);

  const handleBookEvent = async (data: EventState) => {
    const { data: response } = await axios.post("/api/events", data);
    return response.data;
  };

  const { mutate, isLoading, error } = useMutation(handleBookEvent, {
    onSuccess: () => {
      setLogMessage("Event booked successfully");
      router.replace({ pathname: "/success" });
    },
    onError: () => {
      let errorMessage = "Something went wrong";
      if (error instanceof Error) {
        errorMessage = `${error.message}`;
      }
      setLogError(errorMessage);
    },
    onSettled: () => {
      queryClient.invalidateQueries("create");
    },
  });

  const handleConfirmEvent = (values: { name: string; email: string; notes: string }) => {
    mutate({
      ...values,
      date: new Date(`${date}`),
      time: `${time}`,
      guests: ["cal@simba.io"],
      eventType: Number(eventTypeId),
    });
  };

  if (isLoadingGetData || isLoading) {
    return (
      <Backdrop
        sx={{ color: "#fff", zIndex: (theme) => theme.zIndex.drawer + 1 }}
        open={isLoadingGetData || isLoading}>
        <CircularProgress color="inherit" />
      </Backdrop>
    );
  }

  return (
    <>
      <div className="flex items-center justify-center w-screen h-screen bg-secondary">
        <Head>
          <title>
            Confirm your {data.data.duration}min with {data.data.user.name} | Cal.com
          </title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="w-[60%]  h-[65%] bg-white border-8 border-secondary flex flex-row justify-between items-center">
          <div className="mx-5 border-r-2 border-secondary w-[50%] h-[90%] flex flex-col items-start">
            <span className="text-gray-500">{data.data.user.name}</span>
            <span className="text-base font-bold">{data.data.duration} Min Meeting</span>
            <div className="flex flex-row items-center justify-center mt-5 text-gray-500">
              <AccessTimeTwoToneIcon className="mr-3" />
              <span>{data.data.duration} minutes</span>
            </div>
            <div className="flex flex-row items-center justify-center mt-2 text-green-300 cursor-pointer">
              <CalendarTodayOutlinedIcon className="mr-3" />
              <span className="mr-3 ">
                {time}, {moment(`${date}`).format("MMMM Do YYYY")}
              </span>
            </div>
          </div>
          <Formik
            initialValues={{ name: "", email: "", notes: "" }}
            onSubmit={handleConfirmEvent}
            validationSchema={validationSchema}>
            {({ values, handleChange, handleSubmit, errors, handleBlur, touched, isValid }) => (
              <form className="w-[50%] h-full py-10 flex flex-col pl-5 pr-10" onSubmit={handleSubmit}>
                <>
                  <TextField
                    label="Your Name"
                    type="text"
                    name="name"
                    placeholder="John Doe"
                    containerClasses="my-2"
                    value={values.name}
                    onChange={handleChange("name")}
                    onBlur={handleBlur("name")}
                  />
                  {touched.name && errors.name && (
                    <Alert severity="error" className="w-full mb-5">
                      {errors.name}
                    </Alert>
                  )}
                </>
                <>
                  <TextField
                    label="Email Address"
                    type="text"
                    name="email"
                    placeholder="you@email.address"
                    containerClasses="my-2"
                    value={values.email}
                    onChange={handleChange("email")}
                    onBlur={handleBlur("email")}
                  />
                  {touched.email && errors.email && (
                    <Alert severity="error" className="w-full mb-5">
                      {errors.email}
                    </Alert>
                  )}
                </>

                <button type="button" className="flex items-center justify-start my-3 font-bold text-black">
                  <AddIcon />
                  <span>Addition Guests</span>
                </button>

                <label htmlFor="notes" className="my-2 font-bold text-black">
                  Additional notes
                </label>
                <>
                  <textarea
                    value={values.notes}
                    onChange={handleChange("notes")}
                    onBlur={handleBlur("notes")}
                    name="notes"
                    placeholder="Please share any that can help prepare our meeting"
                    className="w-full px-3 py-2 space-x-2 leading-tight text-black border-2 rounded-sm shadow appearance-none border-secondary focus:outline-none focus:shadow-outline"></textarea>
                  {touched.notes && errors.notes && (
                    <Alert severity="error" className="w-full mb-5">
                      {errors.notes}
                    </Alert>
                  )}
                </>

                <div className="flex flex-row items-center">
                  <button
                    type="submit"
                    className="flex items-center justify-center h-10 px-3 py-2 my-5 text-white bg-black"
                    disabled={!isValid}>
                    Confirm
                  </button>
                  <button
                    type="button"
                    className="flex items-center justify-center h-10 px-3 py-2 my-5 ml-3 text-black bg-secondary"
                    onClick={() => router.push("/dushimeemma/15min")}>
                    Cancel
                  </button>
                </div>
              </form>
            )}
          </Formik>
        </div>
      </div>
      <div className="fixed left-[40%] bottom-10 shadow-2xl">
        {logError && (
          <button
            type="button"
            onClick={() => setLogError("")}
            className="flex items-center justify-center w-full h-full">
            <Alert severity="error">{logError}</Alert>
          </button>
        )}
        {logMessage && (
          <button
            type="button"
            onClick={() => setLogMessage("")}
            className="flex items-center justify-center w-full h-full">
            <Alert severity="success">{logMessage}</Alert>
          </button>
        )}
      </div>
    </>
  );
};
export default Book;
